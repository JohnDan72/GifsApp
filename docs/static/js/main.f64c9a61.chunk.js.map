{"version":3,"sources":["css/GifGridItem.module.css","components/AddCategory.js","components/NavBarHeader.js","components/GifGridItem.js","helpers/gifsHelper.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["module","exports","AddCategory","categories","setCategories","useState","inputValue","setInputValue","Form","onSubmit","e","trim","find","cat","cats","InputGroup","size","Input","value","placeholder","onChange","newValue","console","log","Button","type","NavBarHeader","settheme","React","activeKey","setActiveKey","Navbar","appearance","FlexboxGrid","justify","Item","as","Col","xs","Brand","href","Nav","onSelect","eventKey","icon","onClick","random","Math","floor","GifGridItem","id","title","url","shortName","Panel","bodyFill","className","styles","rsPanel","src","imgCard","alt","header","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs_data","map","img","shortname","length","substr","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","gifs","useFetchGifs","Divider","spin","style","fontSize","Row","gif","md","lg","GifExpertApp","theme","CustomProvider","Container","Header","Content","Carousel","shape","colspan","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f64c9a61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgCard\":\"GifGridItem_imgCard__3UbiW\",\"rsPanel\":\"GifGridItem_rsPanel__u1s6x\"};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Form, Input, InputGroup } from 'rsuite';\r\n\r\n\r\n\r\nconst propTypes = {\r\n    categories:     PropTypes.array.isRequired,\r\n    setCategories:  PropTypes.func.isRequired\r\n};\r\n\r\nconst AddCategory = ({ categories , setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (newValue) => {\r\n        console.log(newValue);\r\n        setInputValue(newValue)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        // console.log(\"Submit!!!!\")\r\n        if(inputValue.trim() === ''){\r\n            return;\r\n        }\r\n        let yaExiste = categories.find( cat => cat === inputValue);\r\n        if(yaExiste){\r\n            return;\r\n        }\r\n\r\n        setCategories(cats => [inputValue , ...cats ]);\r\n        setInputValue('');\r\n    }\r\n    return (\r\n        <>\r\n            <Form onSubmit={handleSubmit}>\r\n                <InputGroup size=\"md\">\r\n                    <Input value={inputValue}\r\n                        placeholder=\"nueva categorÃ­a\"\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    {/*onClick={(e) => handleAdd()}*/}\r\n                    <InputGroup.Button type=\"submit\">\r\n                        Agregar\r\n                    </InputGroup.Button>\r\n\r\n                </InputGroup>\r\n\r\n            </Form>\r\n        </>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = propTypes;\r\n\r\nexport default AddCategory;\r\n\r\n","import React from 'react';\r\nimport {\r\n    Col,\r\n    FlexboxGrid,\r\n    Nav,\r\n    Navbar,\r\n} from 'rsuite';\r\n\r\nimport {\r\n    BsFillHouseDoorFill,\r\n    BsFillPlugFill,\r\n    BsGiftFill\r\n} from 'react-icons/bs';\r\nimport { GiDonut } from \"react-icons/gi\";\r\nimport { RiFocus2Fill } from \"react-icons/ri\";\r\n\r\n\r\n\r\n// import { Home } from '@rsuite/icons';\r\n\r\n\r\n\r\n\r\nconst NavBarHeader = ({settheme}) => {\r\n    const [activeKey, setActiveKey] = React.useState(null);\r\n    const handleTheme = () => {\r\n        const themes = ['light','dark','high-contrast'];\r\n        const random = Math.floor(Math.random() * 3);\r\n        settheme(themes[random]);\r\n    }\r\n\r\n    return (\r\n        <Navbar appearance=\"subtle\">\r\n            <FlexboxGrid justify=\"center\">\r\n                <FlexboxGrid.Item as={Col} xs={20}>\r\n                    <Navbar.Brand href=\"#\"><BsGiftFill />Gif Expert</Navbar.Brand>\r\n                    <Nav onSelect={setActiveKey} activeKey={activeKey}>\r\n                        <Nav.Item eventKey=\"1\" icon={<BsFillHouseDoorFill />}>\r\n                            Home\r\n                        </Nav.Item>\r\n                        <Nav.Item eventKey=\"2\" icon={<BsFillPlugFill />}>Matrix gifs</Nav.Item>\r\n                        <Nav.Item eventKey=\"3\" icon={<GiDonut />}>Simpsons gifs</Nav.Item>\r\n                        <Nav.Item eventKey=\"4\" icon={<RiFocus2Fill />} onClick={ handleTheme }>Light Mode</Nav.Item>\r\n\r\n                    </Nav>\r\n\r\n                </FlexboxGrid.Item>\r\n            </FlexboxGrid>\r\n\r\n\r\n        </Navbar>\r\n    );\r\n}\r\n\r\n// #endregion\r\n\r\nexport default NavBarHeader;","\r\nimport React from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport { Panel } from 'rsuite';\r\nimport styles from '../css/GifGridItem.module.css';\r\n\r\n\r\n\r\nconst GifGridItem = ({ id, title, url , shortName }) => {\r\n    return (\r\n        <Panel bodyFill className={styles.rsPanel}> \r\n            <img src={url} className={styles.imgCard} alt={title} />\r\n            <Panel header={shortName}></Panel>\r\n        </Panel>\r\n    );\r\n}\r\n\r\n// #endregion\r\n\r\nexport default GifGridItem;","\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=0bcW1FR66wVpVSj3v8logtrzaY6OIjvO&q=${ encodeURI(category) }&limit=24&offset=0&rating=g&lang=en`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs_data = data.map(img => {\r\n        let shortname = (img.title.length > 30)? img.title.substr(0,29)+' ...':img.title+'';\r\n        return { \r\n                    id: img.id, \r\n                    title: img.title, \r\n                    shortName: shortname,\r\n                    url: img.images?.downsized_medium.url \r\n                }\r\n    });\r\n\r\n    return gifs_data;\r\n    // setgifs(gifs_data);\r\n    // console.log(\"gifs...______________\");\r\n    // console.log(gifs);\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Col, Divider, Row, FlexboxGrid } from 'rsuite';\r\nimport GifGridItem from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\n// icons\r\nimport TimeIcon from '@rsuite/icons/Time';\r\n\r\nconst propTypes = {\r\n    category: PropTypes.string.isRequired\r\n};\r\n\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data: gifs, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h5 >{category}</h5>\r\n            <Divider></Divider>\r\n            { loading && (\r\n                <FlexboxGrid justify=\"center\">\r\n                    <FlexboxGrid.Item >\r\n                        <TimeIcon spin style={{ fontSize: '3rem' }} />\r\n                    </FlexboxGrid.Item>\r\n                </FlexboxGrid>\r\n            )}\r\n            <Row className=\"my-2 animate__animated animate__fadeIn\" >\r\n                {\r\n                    gifs.map(gif => (\r\n                        <Col className=\"mt-3\" key={gif.id} xs={12} md={8} lg={6}>\r\n                            <GifGridItem {...gif} />\r\n                        </Col>\r\n                    ))\r\n                }\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nGifGrid.propTypes = propTypes;\r\n\r\nexport default GifGrid;","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/gifsHelper\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then( gifs => {\r\n\r\n            setState({\r\n                data: gifs,\r\n                loading: false\r\n            });\r\n        });\r\n    }, [ category ]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport {\r\n    Carousel,\r\n    Col,\r\n    Container,\r\n    Content,\r\n    CustomProvider,\r\n    Divider,\r\n    FlexboxGrid,\r\n    Header,\r\n} from 'rsuite';\r\n// icons\r\nimport { BsSearch } from 'react-icons/bs';\r\n\r\n// components\r\nimport AddCategory from './components/AddCategory';\r\nimport NavBarHeader from './components/NavBarHeader';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([]);\r\n    const [theme, settheme] = useState(\"dark\");\r\n\r\n    return (\r\n        <CustomProvider theme={theme}>\r\n            <Container >\r\n                <Header>\r\n                    <NavBarHeader settheme={settheme}/>\r\n                </Header>\r\n                <Content className=\"mt-1\">\r\n                    <FlexboxGrid justify=\"center\">\r\n                        <FlexboxGrid.Item as={Col} xs={24}>\r\n                            <Carousel    \r\n                                        className=\"custom-slider\"\r\n                                        shape='bar'\r\n                                        >\r\n                                <div id=\"carousel1\">\r\n                                    <div className=\"v-a-middle\" justify=\"center\">\r\n                                        <h3>Gif Expert</h3>\r\n                                    </div>\r\n                                </div>\r\n                                <div id=\"carousel2\">\r\n                                    <div className=\"v-a-middle\" justify=\"center\">\r\n                                        <h3>Busca gifs de tu interÃ©s</h3>\r\n                                    </div>\r\n                                </div>\r\n                                <div id=\"carousel3\">\r\n                                    <div className=\"v-a-middle\" justify=\"center\">\r\n                                        <h3>Contamos con mÃ¡s de 1,000,000 de posibilidades</h3>\r\n                                    </div>\r\n                                </div>\r\n                                <div id=\"carousel4\">\r\n                                    <div className=\"v-a-middle\" justify=\"center\">\r\n                                        <h3>Encuentra solo lo mejor</h3>\r\n                                    </div>\r\n                                </div>\r\n                            </Carousel>\r\n                        </FlexboxGrid.Item>\r\n                        <FlexboxGrid.Item as={Col} colspan={24} xs={20} className=\"mt-5\">\r\n                            <h3>Gif Expert App</h3>\r\n                            <Divider>\r\n                                <BsSearch style={{ fontSize: '1.2em' }}/>\r\n                            </Divider>\r\n                            <FlexboxGrid justify=\"center\">\r\n                                <FlexboxGrid.Item as={Col} xs={12}>\r\n                                    <AddCategory categories={categories} setCategories={setCategories}/>\r\n\r\n                                </FlexboxGrid.Item>\r\n\r\n                            </FlexboxGrid>\r\n\r\n                            <Content className=\"my-5 \">\r\n                            {\r\n                                categories.map((cat) => (\r\n                                    <GifGrid category={cat} key={cat}/>\r\n                                ))\r\n                            }\r\n\r\n                            </Content>\r\n                            \r\n                            \r\n                        </FlexboxGrid.Item>\r\n                    </FlexboxGrid>\r\n                </Content>\r\n            </Container>\r\n\r\n        </ CustomProvider>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GifExpertApp from './GifExpertApp';\r\n\r\nimport './index.css';\r\nimport 'animate.css';\r\nimport 'rsuite/styles/index.less';\r\n\r\n\r\nReactDOM.render(\r\n    <GifExpertApp />\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}